// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package gen

import (
	"fmt"
	"github.com/Ralphbaer/cloudwalk/quake-log-parser/app"
	"github.com/Ralphbaer/cloudwalk/quake-log-parser/repository"
	"github.com/Ralphbaer/cloudwalk/quake-log-parser/usecase"
	"github.com/google/wire"
	"os"
)

// Injectors from inject.go:

func InitializeApp() *app.App {
	string2 := setupFileLocation()
	quakeLogFileRepository := repository.NewQuakeLogFileRepository(string2)
	quakeLogParserUseCase := &usecase.QuakeLogParserUseCase{
		Repository: quakeLogFileRepository,
	}
	parser := app.NewParser(quakeLogParserUseCase)
	appApp := &app.App{
		Parser: parser,
	}
	return appApp
}

func InitializeUseCase() *usecase.QuakeLogParserUseCase {
	string2 := setupFileLocation()
	quakeLogFileRepository := repository.NewQuakeLogFileRepository(string2)
	quakeLogParserUseCase := &usecase.QuakeLogParserUseCase{
		Repository: quakeLogFileRepository,
	}
	return quakeLogParserUseCase
}

// inject.go:

func setupFileLocation() string {
	pwd, _ := os.Getwd()
	return fmt.Sprintf("%s/gen/qgames.log", pwd)
}

var applicationSet = wire.NewSet(app.NewParser, setupFileLocation, repository.NewQuakeLogFileRepository, wire.Struct(new(usecase.QuakeLogParserUseCase), "*"), wire.Bind(new(repository.QuakeLogRepository), new(*repository.QuakeLogFileRepository)))
